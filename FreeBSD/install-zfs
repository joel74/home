#!/bin/sh

if [ `id -u` != 0 ]; then
    echo Must be root >&2
    exit 1
fi

# 1. Create the necessary partitions on the disk(s) and add ZFS aware boot code.
#
#       gpart create -s gpt ada0
#       gpart add -t freebsd-boot -s 94 ada0
#       gpart add -t freebsd-zfs -l disk0 ada0
#       gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada0
#
# 2. Create the pool
#
#       zpool create -m /mnt zroot /dev/gpt/disk0
#
# 3. Run this script
#
#       fetch -o - https://raw.github.com/jachymko/home/master/FreeBSD/install-zfs | sh

# ============================================================================================
# Configuration
# ============================================================================================

COMPRESS=${COMPRESS-lz4} # ZFS compression algorithm
    SWAP=${SWAP-2G}      # swap dataset size
   ZROOT=${ZROOT-zroot}  # ZFS pool name

DESTDIR=${DESTDIR-/mnt}              # mount point for the new filesystem
DISTDIR=${DISTDIR-/usr/freebsd-dist} # where the FreeBSD distribution files are

   TIMEZONE=${TIMEZONE-Europe/Prague} # local timezone
WHEEL_USERS=${WHEEL_USERS-jachymko}   # name of the users to be created and added to the wheel group

HOME_TARBALL=/tmp/jachymko.tgz
 HOME_SOURCE=http://github.com/jachymko/home/tarball/master

# Ensure zpool $ZROOT exists
zpool status $ZROOT >/dev/null || exit $?

# Download latest home tarball
if ! [ -e $HOME_TARBALL ]; then
    echo "Downloading $HOME_SOURCE..."
    fetch -o $HOME_TARBALL $HOME_SOURCE
fi

# ============================================================================================
# ZFS creation
# ============================================================================================

mkzfs() {
    local mountpoint quota

    mountpoint=$1; shift
    quota=$1; shift

    echo "zfs create $mountpoint $quota"
    zfs create -o atime=off -o quota=$quota $* $mountpoint
}

# Try to enable lz4 compression
if [ "$COMPRESS" = "lz4" ]; then
    zpool set lz4_compress=enabled $ZROOT 2>/dev/null || COMPRESS=on
fi

if [ "$COMPRESS" = "lz4" ]; then
    echo "LZ4 compression enabled."
fi

# Make sure $ZROOT is mounted on $DESTDIR
zfs set mountpoint=$DESTDIR $ZROOT

# Set $ZROOT as bootable
zpool set bootfs=$ZROOT $ZROOT

# Import $ZROOT using known cache file--will be copied to $DESTDIR/boot when done.
zpool export $ZROOT
zpool import -o cachefile=/var/tmp/zpool.cache $ZROOT

# Swap, maybe?
if [ $SWAP ]; then
    mkzfs $ZROOT/swap -o checksum=off -o org.freebsd:swap=on -V $SWAP
fi

mkzfs $ZROOT/tmp                  256M -o exec=on  -o setuid=off -o compression=$COMPRESS
mkzfs $ZROOT/usr                 8192M -o exec=on  -o setuid=on  -o compression=off
mkzfs $ZROOT/usr/home             256M -o exec=on  -o setuid=off -o compression=off
mkzfs $ZROOT/usr/ports           1024M -o exec=on  -o setuid=off -o compression=$COMPRESS
mkzfs $ZROOT/usr/ports/distfiles  256M -o exec=off -o setuid=off -o compression=off
mkzfs $ZROOT/usr/ports/packages   256M -o exec=off -o setuid=off -o compression=off
mkzfs $ZROOT/usr/src              512M -o exec=off -o setuid=off -o compression=$COMPRESS
mkzfs $ZROOT/var                 8192M -o exec=off -o setuid=off -o compression=off
mkzfs $ZROOT/var/crash           8192M -o exec=off -o setuid=off -o compression=$COMPRESS
mkzfs $ZROOT/var/db               256M -o exec=off -o setuid=off -o compression=$COMPRESS
mkzfs $ZROOT/var/db/pkg             4M -o exec=on  -o setuid=off -o compression=$COMPRESS
mkzfs $ZROOT/var/empty             32K -o exec=off -o setuid=off -o compression=off
mkzfs $ZROOT/var/log              256M -o exec=off -o setuid=off -o compression=$COMPRESS
mkzfs $ZROOT/var/mail              16M -o exec=off -o setuid=off -o compression=$COMPRESS
mkzfs $ZROOT/var/run               16M -o exec=off -o setuid=off -o compression=off
mkzfs $ZROOT/var/tmp              256M -o exec=on  -o setuid=off -o compression=$COMPRESS

# ============================================================================================
# FreeBSD Installation
# ============================================================================================

cd $DESTDIR

# Install FreeBSD
for file in base.txz kernel.txz; do
    echo "Extracting $file to $DESTDIR"
    tar -xpf $DISTDIR/$file
done

# Apparently an fstab file is required.
touch etc/fstab

# Unprivileged user may not delete or rename files of other users in temp directories.
chmod 1777 tmp
chmod 1777 var/tmp

# Link /usr/home to /home
ln -s usr/home home

# Link timezone to localtime
(cd etc && ln -s ../usr/share/zoneinfo/$TIMEZONE localtime)

# Copy zpool.cache so the boot loader is able to locate the pool.
cp /var/tmp/zpool.cache boot/zfs/zpool.cache

# Enable ZFS in kernel and loader.
echo 'zfs_enable="YES"'                  >> etc/rc.conf
echo 'zfs_load="YES"'                    >> boot/loader.conf
echo "vfs.root.mountfrom=\"zfs:$ZROOT\"" >> boot/loader.conf

# ============================================================================================
# Create users
# ============================================================================================

for user in $WHEEL_USERS; do
    echo Adding wheel user $user
    chroot $DESTDIR /usr/sbin/pw useradd $user -g wheel
    chroot $DESTDIR /usr/bin/passwd $user < /dev/tty

    echo Creating $DESTDIR/home/$user
    mkdir home/$user

    echo Changing ownership of $DESTDIR/home/$user
    chroot $DESTDIR /usr/sbin/chown -R $user:wheel /home/$user
done

# ============================================================================================
# Extract home tarball to /root
# ============================================================================================

if [ -e $HOME_TARBALL ]; then
    echo "Extracting $HOME_TARBALL to $DESTDIR/root/.jachymko"
    pax -z -r -f $HOME_TARBALL "-s,jachymko[^/]*,$DESTDIR/root/.jachymko,p"
    rm pax_global_header 2>/dev/null
fi

echo FreeBSD has been installed to $DESTDIR
echo Type 'exit' to unmount the filesystems.
sh -i < /dev/tty

echo Unmounting filesystems...
cd /
zfs umount -a

zfs set mountpoint=legacy $ZROOT
zfs set mountpoint=/tmp   $ZROOT/tmp
zfs set mountpoint=/usr   $ZROOT/usr
zfs set mountpoint=/var   $ZROOT/var
zfs set readonly=on       $ZROOT/var/empty

echo Done. Type 'reboot' to restart the machine.
