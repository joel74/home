#!/bin/sh

if [ `id -u` != 0 ]
then
    echo Must be root >&2
    exit 1
fi

# 1. Create the necessary partitions on the disk(s) and add ZFS aware boot code.
#
#       gpart create -s gpt ada0
#       gpart add -t freebsd-boot -s 94 ada0
#       gpart add -t freebsd-zfs -l disk0 ada0
#       gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada0
#
# 2. Create the pool
#
#       zpool create -m /mnt zroot /dev/gpt/disk0
#
# 3. Run this script
#
#       fetch -o - http://goo.gl/RPx9OV | sh

# ============================================================================================
# Configuration
# ============================================================================================

COMPRESS=${COMPRESS-lz4}             # ZFS compression algorithm
    SWAP=${SWAP-2G}                  # swap dataset size
   ZPOOL=${ZPOOL-zroot}              # ZFS pool name
 BE_ROOT=${ZPOOL}/ROOT               # boot environment container dataset
BOOT_ENV=${BEROOT}/default           # the default boot environment dataset

DESTDIR=${DESTDIR-/mnt}              # mount point for the new filesystem
DISTDIR=${DISTDIR-/usr/freebsd-dist} # where the FreeBSD distribution files are

WHEEL_USERS=${WHEEL_USERS-julie}     # name of the users to be created and added
                                     # to the wheel group

# Ensure zpool $ZPOOL exists
zpool status $ZPOOL >/dev/null || exit $?

# ============================================================================================
# ZFS creation
# ============================================================================================

mkzfs() {
    local mountpoint
    mountpoint=$1; shift

    echo "zfs create $mountpoint"
    zfs create $* $mountpoint
}

# Try to enable lz4 compression
if [ "$COMPRESS" = "lz4" ]
then
    zpool set lz4_compress=enabled ${ZPOOL} 2>/dev/null || COMPRESS=on
fi

if [ "$COMPRESS" = "lz4" ]
then
    echo "LZ4 compression enabled."
fi

# Disable access time
zfs set atime=off ${ZPOOL}

# Make sure pool root is not mounted
zfs set mountpoint=none ${ZPOOL}

# Swap, maybe?
if [ "${SWAP}" ]
then
    zfs create -o checksum=off -o org.freebsd:swap=on -V ${SWAP} ${ZPOOL}/swap
fi

# Create container for boot environments
zfs create ${BE_ROOT}

# Create the default boot environment
zfs create -o mountpoint=${DESTDIR} ${BOOT_ENV}

COMP="compression=${COMPRESS}"; NOCOMP="compression=off"
EXEC="exec=on";                 NOEXEC="exec=off"
SUID="setuid=on";               NOSUID="setuid=off"

# These datasets are part of the boot environment
mkzfs ${BOOT_ENV}/tmp            -o   ${EXEC} -o ${NOSUID} -o   ${COMP}
mkzfs ${BOOT_ENV}/usr            -o   ${EXEC} -o   ${SUID} -o ${NOCOMP}
mkzfs ${BOOT_ENV}/var            -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP}
mkzfs ${BOOT_ENV}/var/crash      -o ${NOEXEC} -o ${NOSUID} -o   ${COMP}
mkzfs ${BOOT_ENV}/var/db         -o ${NOEXEC} -o ${NOSUID} -o   ${COMP}
mkzfs ${BOOT_ENV}/var/db/pkg     -o   ${EXEC} -o ${NOSUID} -o   ${COMP}
mkzfs ${BOOT_ENV}/var/empty      -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP}
mkzfs ${BOOT_ENV}/var/log        -o ${NOEXEC} -o ${NOSUID} -o   ${COMP}
mkzfs ${BOOT_ENV}/var/mail       -o ${NOEXEC} -o ${NOSUID} -o   ${COMP}
mkzfs ${BOOT_ENV}/var/run        -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP}
mkzfs ${BOOT_ENV}/var/tmp        -o   ${EXEC} -o ${NOSUID} -o   ${COMP}

# These datasets aren't part of the boot environment
mkzfs ${ZPOOL}/home                -o   ${EXEC} -o ${NOSUID} -o ${NOCOMP}
mkzfs ${ZPOOL}/usr.ports           -o   ${EXEC} -o ${NOSUID} -o   ${COMP}
mkzfs ${ZPOOL}/usr.ports/distfiles -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP}
mkzfs ${ZPOOL}/usr.ports/packages  -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP}
mkzfs ${ZPOOL}/usr.src             -o ${NOEXEC} -o ${NOSUID} -o   ${COMP}

# Set the boot environemnt as bootable
zpool set bootfs=${BOOT_ENV} ${ZPOOL}

# Import pool using known cache file--will be copied to $DESTDIR/boot when done.
zpool export ${ZPOOL}
zpool import -o cachefile=/var/tmp/zpool.cache ${ZPOOL}

# ============================================================================================
# FreeBSD Installation
# ============================================================================================

cd $DESTDIR

# Install FreeBSD
for file in base.txz kernel.txz
do
    echo "Extracting $file to $DESTDIR"
    tar -xpf $DISTDIR/$file
done

# Apparently an fstab file is required.
touch etc/fstab

# Unprivileged user may not delete or rename files of other users in temp directories.
chmod 1777 tmp
chmod 1777 var/tmp

# Copy zpool.cache so the boot loader is able to locate the pool.
cp /var/tmp/zpool.cache boot/zfs/zpool.cache

# Enable ZFS in the loader.
echo 'zfs_load="YES"'                         >> boot/loader.conf
echo "vfs.root.mountfrom=\"zfs:${BOOT_ENV}\"" >> boot/loader.conf

# Enable essential services
echo 'sshd_enable="YES"' >> etc/rc.conf.d/sshd
echo 'zfs_enable="YES"'  >> etc/rc.conf.d/zfs

# ============================================================================================
# Create users
# ============================================================================================

for user in $WHEEL_USERS
do
    echo Adding wheel user $user
    chroot $DESTDIR /usr/sbin/pw useradd $user -g wheel
    chroot $DESTDIR /usr/bin/passwd $user < /dev/tty

    echo Creating $DESTDIR/home/$user
    mkdir home/$user

    echo Changing ownership of $DESTDIR/home/$user
    chroot $DESTDIR /usr/sbin/chown -R $user:wheel /home/$user
done

echo FreeBSD has been installed to $DESTDIR
echo Unmounting filesystems...

cd /
zfs umount -a

zfs set mountpoint=legacy      ${BOOT_ENV}
zfs set readonly=on            ${BOOT_ENV}/var/empty

zfs set mountpoint=/home       ${ZPOOL}/home
zfs set mountpoint=/usr/ports  ${ZPOOL}/usr.ports
zfs set mountpoint=/usr/src    ${ZPOOL}/usr.src

echo Done. Type 'reboot' to restart the machine.
