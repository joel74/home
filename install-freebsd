#!/bin/sh

# ==============================================================================
# Julie's FreeBSD 10.0+ ZFS Installation Script
# ==============================================================================

# This script automates installation of FreeBSD 10.0 and later on ZFS.
# The resulting machine is prepared for further configuration using Ansible,
# i.e., it has Python installed and SSH access enabled.
#
#
#    1.  Boot the FreeBSD installation image, e.g.
#
#            http://ftp.cz.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.0/FreeBSD-10.0-RELEASE-amd64-disc1.iso
#
#    2.  Select the "Live CD" option to quit the installer.
#
#    3.  In case you are installing 10.0-RELEASE (anything older than r271549),
#        make sure the /tmp/bsdinstall_etc directory exists, because that's
#        where /etc/resolv.conf is linked from.
#
#        10.1 shouldn't need this anymore.
#
#            mkdir /tmp/bsdinstall_etc
#
#    3a. Set up networking using a static IPv4 address, e.g.:
#
#            ifconfig vtnet0 inet 10.20.30.40/24
#            route add default 10.20.30.1
#            echo 'nameserver 8.8.8.8'  > /etc/resolv.conf
#            echo 'nameserver 8.8.4.4' >> /etc/resolv.conf
#
#    3b. Set up networking using DHCP, e.g.:
#
#            dhclient igb0
#
#    4.  Set the hostname
#
#            hostname demonik
#
#    5.  For each disk:
#
#            5.1. Create a GPT partition table
#
#                 gpart create -s gpt ada0
#
#            5.2. Create a 64K boot partition, a 2G swap partition, and a ZFS
#                 partition spanning the rest of the drive. Make sure
#                 the partitions are aligned on 1M boundaries.
#
#                 gpart add -t freebsd-boot -l boot0 -s 64K       ada0
#                 gpart add -t freebsd-swap -l swap0 -s  2G -b 1M ada0
#                 gpart add -t freebsd-zfs  -l disk0        -b 1M ada0
#
#            5.3. Install the ZFS-aware bootloader
#
#                 gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada0
#
#    6.  Create a NOP device(s) to force 4K sectors.
#
#            gnop create -S 4096 gpt/disk0
#
#    7.  Create a ZFS pool from the NOP device(s) and export it.
#
#            zpool create -m /mnt zroot /dev/gpt/disk0.nop
#            zpool export zroot
#
#    8.  Destroy the NOP device(s) and reimport the pool. Don't forget to
#        specify the /dev/gpt directory, otherwise the partitions won't be
#        identified by their GPT labels.
#
#            gnop destroy gpt/disk0.nop
#            zpool import -d /dev/gpt zroot
#
#    9. Run this script, optionally passing configuration variables.
#
#            fetch --no-verify-peer -o - http://goo.gl/RPx9OV | ZPOOL=zroot sh
#

# ==============================================================================
# Configuration
# ==============================================================================

# ZFS pool name
: ${ZPOOL:=zroot}

# swap partition device file, may be empty
: ${SWAP:=}

# names of the users to be created and added to the wheel group
: ${WHEEL_USERS:=julie}

# mount point for the new filesystem
: ${MNT:=/mnt}

# the distribution files to extract
: ${DIST_FILES:=base.txz kernel.txz}

# where the FreeBSD distribution files are
: ${DIST_DIR:=/usr/freebsd-dist}

# which version to download if the distribution files are not available
: ${DIST_RELEASE:=10.0-RELEASE}

# where from download the distribution files
: ${DIST_MIRROR:=http://ftp.cz.freebsd.org}

# machine architecture (amd64 or whatever)
: ${DIST_ARCH:=`uname -m`}

# URL where the txz distribution files are
: ${DIST_URL:=$DIST_MIRROR/pub/FreeBSD/releases/$DIST_ARCH/$DIST_RELEASE}

# boot environment container dataset
BE_ROOT=${ZPOOL}/ROOT

# the default boot environment dataset
BOOT_ENV=${BE_ROOT}/current

# ==============================================================================
# Config Validation
# ==============================================================================

_errex() {
    echo $1 >&2
    exit 1
}

if [ `id -u` != 0 ]
then
    _errex "Must be root"
fi

if ! zpool status ${ZPOOL} >/dev/null
then
    _errex
fi

for swp in ${SWAP}
do
    if [ ! -c "${swp}" ]
    then
        _errex "${swp} is not a character device"
    fi
done

# ==============================================================================
# ZFS creation
# ==============================================================================

_zfs_create() {
    # HACK: set $dataset to the last arg. for implicitly enumerates
    # over arguments and the loop variable isn't scoped
    for dataset; do :; done

    if zfs list ${dataset} >/dev/null 2>&1
    then
        echo "   already exists: ${dataset}"
    else
        zfs create $* && echo "   created: ${dataset}" || _errex
    fi
}

echo Disable access time.
zfs set atime=off ${ZPOOL} || _errex

echo Make sure the root data set is not mounted.
zfs set mountpoint=none ${ZPOOL} || _errex

echo Create ${BE_ROOT} container for boot environments
_zfs_create -o mountpoint=none ${BE_ROOT}

echo Create the default boot environment ${BOOT_ENV}
_zfs_create -o mountpoint=${MNT} ${BOOT_ENV}

COMP="compression=on"; NOCOMP="compression=off"
EXEC="exec=on";        NOEXEC="exec=off"
SUID="setuid=on";      NOSUID="setuid=off"

echo Create datasets that are part of the boot environment
_zfs_create -o   ${EXEC} -o ${NOSUID} -o   ${COMP} ${BOOT_ENV}/tmp
_zfs_create -o   ${EXEC} -o   ${SUID} -o ${NOCOMP} ${BOOT_ENV}/usr
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} ${BOOT_ENV}/var
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} ${BOOT_ENV}/var/crash
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} ${BOOT_ENV}/var/db
_zfs_create -o   ${EXEC} -o ${NOSUID} -o   ${COMP} ${BOOT_ENV}/var/db/pkg
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} ${BOOT_ENV}/var/log
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} ${BOOT_ENV}/var/mail
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} ${BOOT_ENV}/var/run
_zfs_create -o   ${EXEC} -o ${NOSUID} -o   ${COMP} ${BOOT_ENV}/var/tmp

echo Create datasets that aren\'t part of the boot environment
_zfs_create -o   ${EXEC} -o ${NOSUID} -o ${NOCOMP} -o mountpoint=${MNT}/home      ${ZPOOL}/home
_zfs_create -o   ${EXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=${MNT}/usr/ports ${ZPOOL}/usr.ports
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=${MNT}/usr/src   ${ZPOOL}/usr.src
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} -o mountpoint=${MNT}/var/empty ${ZPOOL}/var.empty

_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} ${ZPOOL}/usr.ports/distfiles
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} ${ZPOOL}/usr.ports/packages

echo Set the boot environment \"${BOOT_ENV}\" as bootfs
zpool set bootfs=${BOOT_ENV} ${ZPOOL} || _errex

echo Re-import the pool using known cache file.
zpool export ${ZPOOL} || _errex
zpool import -o cachefile=/var/tmp/zpool.cache ${ZPOOL} || _errex

echo Add swap partitions so we don\'t get burned extracting tars
for swp in ${SWAP}
do
    echo "    swapon ${swp}"
    swapon ${swp} || _errex
done

# ==============================================================================
# FreeBSD Installation
# ==============================================================================

_dist_files_on_media() {

    echo Looking for distribution files in ${DIST_DIR}

    for file in ${DIST_FILES}
    do
        if [ ! -r "${DIST_DIR}/${file}" ]
        then
            echo "    ${file} not found."
            return 1
        fi
    done

    echo "    all files available."
    return 0
}

_install_from() {
    # TODO: verify MANIFEST

    echo Install FreeBSD from ${1}
    for file in ${DIST_FILES}
    do
        echo "Extract \"${1}/${file}\" to \"${MNT}\"..."
        tar -x -p -C ${MNT} -f ${1}/${file} || _errex
    done
}

_install_from_web() {
    echo Create ${MNT}${DIST_DIR}
    mkdir -p ${MNT}${DIST_DIR} || _errex

    echo Download FreeBSD
    echo "   from ${DIST_URL}"
    echo "   to   ${MNT}${DIST_DIR}"

    for file in MANIFEST ${DIST_FILES}
    do
        fetch --no-verify-peer --mirror \
              -o ${MNT}${DIST_DIR}      \
              ${DIST_URL}/${file} || _errex
    done

    _install_from ${MNT}${DIST_DIR}
}


if _dist_files_on_media
then
    _install_from ${DIST_DIR}
else
    _install_from_web
fi

# ==============================================================================
# Configuration
# ==============================================================================

cd $MNT

echo Create an empty fstab file
touch etc/fstab || _errex

for swp in ${SWAP}
do
    echo Add ${swp} as a swap partition to fstab
    echo "${swp} none swap sw 0 0" >> etc/fstab || _errex
done

echo Set tmp and var/tmp permissions
# 1000 = sticky = unprivileged users may not delete or rename files of other users
chmod 1777 tmp || _errex
chmod 1777 var/tmp || _errex

echo Copy zpool.cache so the boot loader is able to locate the pool.
cp /var/tmp/zpool.cache boot/zfs/zpool.cache || _errex

echo Enable ZFS in the loader.
echo 'zfs_load="YES"'                         >> boot/loader.conf || _errex
echo "vfs.root.mountfrom=\"zfs:${BOOT_ENV}\"" >> boot/loader.conf || _errex

echo Enable sshd and zfs services
echo 'sshd_enable="YES"' >> etc/rc.conf.d/sshd || _errex
echo 'zfs_enable="YES"'  >> etc/rc.conf.d/zfs || _errex

# ==============================================================================
# Create users
# ==============================================================================

for user in $WHEEL_USERS
do
    echo Add wheel user $user
    chroot $MNT /usr/sbin/pw useradd $user -g wheel || _errex
    chroot $MNT /usr/bin/passwd $user < /dev/tty || _errex

    echo Create $MNT/home/$user
    mkdir home/$user || _errex

    echo Change ownership of $MNT/home/$user
    chroot $MNT /usr/sbin/chown -R $user:wheel /home/$user || _errex
done

echo FreeBSD has been installed to \"${MNT}\"
echo Unmounting filesystems...

cd /
zfs umount -a || _errex

zfs set mountpoint=legacy      ${BOOT_ENV} || _errex

zfs set mountpoint=/home       ${ZPOOL}/home || _errex
zfs set mountpoint=/usr/ports  ${ZPOOL}/usr.ports || _errex
zfs set mountpoint=/usr/src    ${ZPOOL}/usr.src || _errex
zfs set mountpoint=/var/empty  ${ZPOOL}/var.empty || _errex
zfs set readonly=on            ${ZPOOL}/var.empty || _errex

echo Done. Type \'reboot\' to restart the machine.
