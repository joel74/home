#!/bin/sh

# ==============================================================================
# Julie's Awesome FreeBSD 10.0+ ZFS Installation Script
# ==============================================================================

# This script automates installation of FreeBSD 10.0 and later on ZFS.
# The resulting machine is prepared for further configuration using Ansible,
# i.e., it has Python installed and SSH access enabled.
#
#
#    1.  Boot a FreeBSD 10 image, e.g.
#
#            http://ftp.cz.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.0/FreeBSD-10.0-RELEASE-amd64-disc1.iso
#
#
#    2.  Select the "Live CD" option to quit the installer.
#
#
#    3.  In case your Live CD is older than r271549 (i.e. 10.0-RELEASE), make
#        sure the /tmp/bsdinstall_etc directory exists, because that's
#        where /etc/resolv.conf is linked from.
#
#        10.1 shouldn't need this anymore.
#
#            mkdir /tmp/bsdinstall_etc
#
#
#    3.  Set up IPv4 networking so you can actually download this script, and
#        possibly the FreeBSD distribution files, if they are not available on
#        the boot media.
#
#        This script attempts to persist the following settings from the Live CD
#        environment to the newly created machine:
#
#        *   All interfaces with a running dhclient are marked as "DHCP" in the
#            new /etc/rc.conf.d/network file.
#
#        *   Online non-loopback interfaces have their primary IPv4 address and
#            netmask persisted.
#
#        *   The default route is saved to rc.conf.d/routing, unless there is a
#            dhclient running on its interface.
#
#        *   The hostname is saved to /etc/rc.conf.d/hostname.
#
#        *   The /etc/resolv.conf file is copied to the new filesystem.
#
#        To set up networking using a static IPv4 address, use something like
#        this:
#
#            ifconfig vtnet0 inet 10.20.30.40/24
#            route add default 10.20.30.1
#            echo 'nameserver 8.8.8.8'  > /etc/resolv.conf
#            echo 'nameserver 8.8.4.4' >> /etc/resolv.conf
#
#        To set up networking using DHCP, use:
#
#            dhclient igb0
#
#        To set the hostname, type:
#
#            hostname demonik
#
#
#    5.  Then, prepare all your disk drives. Do the following for each disk that
#        should be bootable (ada0 being the disk device name here):
#
#            5.1. Create a GPT partition table.
#
#                     gpart create -s gpt ada0
#
#            5.2. Create a 64K boot partition, a 2G swap partition, and a ZFS
#                 partition spanning the rest of the drive. Make sure
#                 the partitions are aligned on 1M boundaries.
#
#                     gpart add -t freebsd-boot -l boot0 -s 64K       ada0
#                     gpart add -t freebsd-swap -l swap0 -s  2G -b 1M ada0
#                     gpart add -t freebsd-zfs  -l disk0        -b 1M ada0
#
#                 Don't forget to add the created swap partitions to the SWAP
#                 environment variable, so the script can add them to /etc/fstab
#                 later:
#
#                     setenv SWAP "/dev/gpt/swap0 /dev/gpt/swap1"
#
#            5.3. Install the ZFS-aware bootloader.
#
#                     gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada0
#
#            5.4. Create a NOP device(s) to force 4K sectors.
#
#                     gnop create -S 4096 gpt/disk0
#
#
#    6.  Create a ZFS pool from the NOP device(s). Make sure it doesn't get
#        mounted right now, the script will take care of that later.
#
#            zpool create -m none zroot /dev/gpt/disk0.nop
#
#
#    7.  Export the pool, destroy the NOP device(s) and reimport it using the
#        underlying real device(s).
#
#        Don't forget to specify the /dev/gpt directory, otherwise the
#        partitions won't be identified by their GPT labels.
#
#            zpool export zroot
#            gnop destroy gpt/disk0.nop
#            zpool import -d /dev/gpt zroot
#
#
#    8. Run this script, optionally passing configuration variables. The
#       following example assumes the default tcsh shell (yuck):
#
#            setenv ZPOOL       zroot
#            setenv SWAP        /dev/gpt/swap0
#            setenv WHEEL_USERS jubal
#
#            fetch --no-verify-peer -o - http://goo.gl/RPx9OV | sh
#

# ==============================================================================
# Configuration
# ==============================================================================

# ZFS pool name
: ${ZPOOL:=zroot}

# swap partition device file, may be empty if the machine has more than 2 GB of
# RAM
: ${SWAP:=}

# allow no swap partitions even for machines with less than 2 GB of RAM
: ${NOSWAP:=}

# names of the users to be created and added to the wheel group
: ${WHEEL_USERS:=julie}

# mount point for the new filesystem
: ${MNT:=/mnt}

# the distribution files to extract
: ${DIST_FILES:=base.txz kernel.txz}

# where the FreeBSD distribution files are
: ${DIST_DIR:=/usr/freebsd-dist}

# which version to download if the distribution files are not available
: ${DIST_RELEASE:=10.0-RELEASE}

# where from download the distribution files
: ${DIST_MIRROR:=http://ftp.cz.freebsd.org}

# machine architecture (amd64 or whatever)
: ${DIST_ARCH:=`uname -m`}

# URL where the txz distribution files are
: ${DIST_URL:=$DIST_MIRROR/pub/FreeBSD/releases/$DIST_ARCH/$DIST_RELEASE}

# ==============================================================================
# Functions
# ==============================================================================

_errex()
{
    echo $1 >&2
    exit 1
}

_zfs_create()
{
    local dataset field

    # HACK: set $dataset to the last arg. "for" implicitly enumerates over all
    # arguments and the loop variable isn't scoped. Colon is a built-in
    # version of /usr/bin/true.

    for dataset; do :; done

    if zfs list ${dataset} >/dev/null 2>&1
    then
        echo "  already exists: ${dataset}"
    else
        echo "  create: ${dataset}"
        zfs create -o mountpoint=none ${dataset} || _errex
    fi

    while [ $# -gt 1 ]
    do
        if [ "$1" != "-o" -o -z "${2}" ]
        then
            _errex "invalid _zfs_create() call: $*"
        fi

        # parse the field=value argument, if the value
        # equals to inherit, use `zfs inherit`, otherwise
        # pass to `zfs set` unchanged.

        if [ `echo "${2}" | cut -f2 -d=` = "inherit" ]
        then
            field=`echo "${2}" | cut -f1 -d=`
            echo "    inherit ${field}"
            zfs inherit ${field} ${dataset} || _errex
        else
            echo "    set ${2}"
            zfs set ${2} ${dataset} || _errex
        fi

        shift 2
    done
}

_is_swap_on()
{
    swapinfo | grep "^${1}\b" >/dev/null
}

_is_swap_on_zpool()
{
    [ "${1#*/dev/zvol/${ZPOOL}}" != "${1}" ]
}

_is_dhcp_iface()
{
    [ "${IFS_DHCP#*${1}}" != "${IFS_DHCP}" ]
}

_dist_files_on_media()
{
    local result
    result=0

    echo  "Looking for distribution files in \"${DIST_DIR}\""

    for file in ${DIST_FILES}
    do
        if [ -r "${DIST_DIR}/${file}" ]
        then
            echo "  found: ${DIST_DIR}/${file}"
        else
            echo "  not found: ${DIST_DIR}/${file}"
            result=1
        fi
    done

    return ${result}
}

_install_from()
{
    # TODO: verify MANIFEST SHA signatures

    echo  "Remove schg flag from \"${MNT}\"."
    chflags -R noschg ${MNT}

    echo "Install FreeBSD from \"${1}\"."
    for file in ${DIST_FILES}
    do
        echo "  Extract \"${1}/${file}\" to \"${MNT}\"."
        tar -xpU -C ${MNT} -f ${1}/${file} || _errex
    done
}

_install_from_web()
{
    echo "Create ${MNT}${DIST_DIR}."
    mkdir -p ${MNT}${DIST_DIR} || _errex

    echo "Download distribution files"
    echo "  from ${DIST_URL}"
    echo "  to   ${MNT}${DIST_DIR}"

    for file in MANIFEST ${DIST_FILES}
    do
        fetch --no-verify-peer --mirror \
              -o ${MNT}${DIST_DIR}      \
              ${DIST_URL}/${file} || _errex
    done

    _install_from "${MNT}${DIST_DIR}"
}

# ==============================================================================
# Make sure the configuration is right
# ==============================================================================

clear

if [ `id -u` != 0 ]
then
    _errex "Must be root"
fi

if ! zpool status ${ZPOOL} >/dev/null
then
    _errex
fi

if [ -z "${SWAP}" ]
then
    echo "No swap devices specified, are you sure?"
    sleep 5

    TWO_GIGS=$(( 2 * 1024 * 1024 * 1024 ))
    if [ -z "${NOSWAP}" -a `sysctl -n hw.physmem` -lt ${TWO_GIGS} ]
    then
        echo "This machine has less than 2GB of physical memory."
        echo "If you are sure you don't want any swap devices,"
        echo "set NOSWAP environment variable to 'yes' and retry."
        _errex
    fi
fi

for swp in ${SWAP}
do
    if [ ! -c "${swp}" ]
    then
        _errex "${swp} is not a character device"
    fi
done

# ==============================================================================
# DHCP and default route detection
# ==============================================================================

# dhclient process IDs
DHCLIENT_PIDS=$(pgrep dhclient)

if [ -n "${DHCLIENT_PIDS}" ]
then
    # interfaces that have a dhclient running
    IFS_DHCP=$(ps -o 'command=' -p ${DHCLIENT_PIDS} | awk '{ print $2 }' | uniq)
fi

# all interfaces that are up, excluding loopback
IFS_UP=$(ifconfig -l -u | sed -E -e 's/lo[0-9]+//g')

# default route address and interface
DEFAULT_ROUTE_IP=$(netstat -nrf inet | grep '^default' | awk '{ print $2 }')
DEFAULT_ROUTE_IF=$(netstat -nrf inet | grep '^default' | awk '{ print $6 }')

# ==============================================================================
# ZFS creation
# ==============================================================================

# boot environment container dataset
BE_ROOT=${ZPOOL}/ROOT

# the default boot environment dataset
BOOT_ENV=${BE_ROOT}/current

# various dataset options
COMP="compression=on"; NOCOMP="compression=off"
EXEC="exec=on";        NOEXEC="exec=off"
SUID="setuid=on";      NOSUID="setuid=off"

echo Unmount all ZFS filesystems.
# in case there were previous attempts to run this scripts
zfs umount -a

echo Disable access time on the root data set.
zfs set atime=off ${ZPOOL} || _errex

echo Make sure the root dataset cannot be mounted.
zfs set canmount=off ${ZPOOL} || _errex

# explicitly specify the mountpoints for all datasets as they may exist
# from previous installation attempts. otherwise, the datasets could end up
# mounted under /, hiding our /tmp/bsdinstall_etc and possibly making all
# kinds of mess.

echo Make sure the root dataset has no mountpoint.
zfs set mountpoint=none ${ZPOOL} || _errex

echo Create container for boot environments.
_zfs_create -o canmount=off -o mountpoint=none ${BE_ROOT}

echo Create the default boot environment.
_zfs_create -o mountpoint=${MNT} ${BOOT_ENV}

echo Create datasets that are part of the boot environment.
_zfs_create -o   ${EXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=inherit ${BOOT_ENV}/tmp
_zfs_create -o   ${EXEC} -o   ${SUID} -o ${NOCOMP} -o mountpoint=inherit ${BOOT_ENV}/usr
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} -o mountpoint=inherit ${BOOT_ENV}/var
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=inherit ${BOOT_ENV}/var/crash
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=inherit ${BOOT_ENV}/var/db
_zfs_create -o   ${EXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=inherit ${BOOT_ENV}/var/db/pkg
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=inherit ${BOOT_ENV}/var/log
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=inherit ${BOOT_ENV}/var/mail
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} -o mountpoint=inherit ${BOOT_ENV}/var/run
_zfs_create -o   ${EXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=inherit ${BOOT_ENV}/var/tmp

echo Create datasets that aren\'t part of the boot environment.
_zfs_create -o   ${EXEC} -o ${NOSUID} -o ${NOCOMP} -o mountpoint=${MNT}/home      ${ZPOOL}/home
_zfs_create -o   ${EXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=${MNT}/usr/ports ${ZPOOL}/usr.ports
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} -o mountpoint=inherit          ${ZPOOL}/usr.ports/distfiles
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} -o mountpoint=inherit          ${ZPOOL}/usr.ports/packages
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o   ${COMP} -o mountpoint=${MNT}/usr/src   ${ZPOOL}/usr.src
_zfs_create -o ${NOEXEC} -o ${NOSUID} -o ${NOCOMP} -o mountpoint=${MNT}/var/empty ${ZPOOL}/var.empty

echo Set the dataset \"${BOOT_ENV}\" as bootfs.
zpool set bootfs=${BOOT_ENV} ${ZPOOL} || _errex

echo Remove any swap partitions residing on the pool.
for swp in ${SWAP}
do
    if _is_swap_on_zpool ${swp}
    then
        if _is_swap_on ${swp}
        then
            echo "  disable swap on ${swp}"
            swapoff ${swp} || _errex
        else
            echo "  swap is not enabled on ${swp}"
        fi
    else
        echo "  ${swp} is not on ${ZPOOL}"
    fi
done

echo Re-import the pool using a known cache file.
zpool export ${ZPOOL} || _errex
zpool import -o cachefile=/var/tmp/zpool.cache ${ZPOOL} || _errex

# ==============================================================================
# Enable Swap
# ==============================================================================

echo Add swap partitions so we don\'t get burned on little machines.
for swp in ${SWAP}
do
    if _is_swap_on ${swp}
    then
        echo "  already enabled: ${swp}"
    else
        echo "  enable on: ${swp}"
        swapon ${swp} || _errex
    fi
done

# ==============================================================================
# FreeBSD Installation
# ==============================================================================

echo Set var.empty dataset as read-write for the installation.
zfs set readonly=off ${ZPOOL}/var.empty || _errex

if _dist_files_on_media
then
    _install_from ${DIST_DIR}
else
    _install_from_web
fi

echo Set var.empty readonly.
zfs set readonly=on ${ZPOOL}/var.empty || _errex

# ==============================================================================
# Configuration
# ==============================================================================

echo Create an fstab file
echo '' > ${MNT}/etc/fstab || _errex

for swp in ${SWAP}
do
    echo "  add ${swp} as a swap partition"
    echo "${swp} none swap sw 0 0" >> ${MNT}/etc/fstab || _errex
done

echo Set tmp and var/tmp 1777 permissions.
# 1000 = sticky
# means unprivileged users may not delete or rename files of other users
chmod 1777 ${MNT}/tmp || _errex
chmod 1777 ${MNT}/var/tmp || _errex

echo Copy zpool.cache so the boot loader is able to locate the pool.
cp /var/tmp/zpool.cache ${MNT}/boot/zfs/zpool.cache || _errex

echo Enable ZFS in the loader.
cat > ${MNT}/boot/loader.conf << EOF || _errex
zfs_load="YES"
vfs.root.mountfrom="zfs:${BOOT_ENV}"
EOF

echo Copy resolv.conf.
if [ -r /etc/resolv.conf ]
then
    cp /etc/resolv.conf ${MNT}/etc/resolv.conf || _errex
else
    echo "  skip: /etc/resolv.conf is not readable"
fi

echo Create etc/rc.conf.d directory.
mkdir -p ${MNT}/etc/rc.conf.d || _errex

echo Enable sshd and zfs services.
echo 'sshd_enable="YES"' > ${MNT}/etc/rc.conf.d/sshd || _errex
echo 'zfs_enable="YES"'  > ${MNT}/etc/rc.conf.d/zfs || _errex

# ==============================================================================
# etc/rc.conf.d/network
# ==============================================================================

echo Create etc/rc.conf.d/network file.
echo '' > ${MNT}/etc/rc.conf.d/network

for ifname in ${IFS_UP}
do
    if _is_dhcp_iface ${ifname}
    then
        config="DHCP"
    else
        config=$(ifconfig ${ifname} | grep -e inet\\b | head -n 1)
    fi

    echo "  ifconfig_${ifname}=\"${config}\""
    echo "ifconfig_${ifname}=\"${config}\"" >> ${MNT}/etc/rc.conf.d/network
done

# ==============================================================================
# etc/rc.conf.d/routing
# ==============================================================================

echo Create etc/rc.conf.d/routing file.
if [ -n "${DEFAULT_ROUTE_IP}" ]
then
    if _is_dhcp_iface ${DEFAULT_ROUTE_IF}
    then
        echo "  skip: default route interface ${DEFAULT_ROUTE_IF} has dhclient"
    else
        echo "  defaultroute=\"${DEFAULT_ROUTE_IP}\""
        echo "defaultroute=\"${DEFAULT_ROUTE_IP}\"" > ${MNT}/etc/rc.conf.d/routing
    fi
else
    echo "  skip: no default route (WTF?)"
fi

# ==============================================================================
# wheel users
# ==============================================================================

for user in ${WHEEL_USERS}
do
    echo "Add wheel user ${user}"
    chroot ${MNT} /usr/sbin/pw useradd ${user} -g wheel || _errex

    echo "  create ${MNT}/home/${user}"
    mkdir -p ${MNT}/home/${user} || _errex

    echo "  set ownership of ${MNT}/home/${user}"
    chroot ${MNT} /usr/sbin/chown -R ${user}:wheel /home/${user} || _errex
done

# ==============================================================================
# pkg bootstrap
# ==============================================================================

echo "Bootstrap pkg"
chroot ${MNT} /usr/bin/env ASSUME_ALWAYS_YES=YES pkg bootstrap || _errex

exit 42
cd /

echo Unmount datasets.
zfs umount -a || _errex

echo Set dataset mountpoints.
zfs set mountpoint=legacy      ${BOOT_ENV}           || _errex
zfs set mountpoint=/home          ${ZPOOL}/home      || _errex
zfs set mountpoint=/tmp        ${BOOT_ENV}/tmp       || _errex
zfs set mountpoint=/usr        ${BOOT_ENV}/usr       || _errex
zfs set mountpoint=/usr/ports     ${ZPOOL}/usr.ports || _errex
zfs set mountpoint=/usr/src       ${ZPOOL}/usr.src   || _errex
zfs set mountpoint=/var        ${BOOT_ENV}/var       || _errex
zfs set mountpoint=/var/empty     ${ZPOOL}/var.empty || _errex

echo
echo Unmount datasets to avoid having / mounted from the boot media,
echo and /usr, /var, /tmp, and /home from the new filesystem.
zfs umount -a || _errex

echo
echo Done. Type \'reboot\' to restart the machine.
