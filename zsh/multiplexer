#!/usr/bin/env zsh

    TMUX_DIR="${HOME}/.jachymko/tmux"
DEFAULT_CONF="${TMUX_DIR}/tmux.conf"
 MASTER_CONF="${TMUX_DIR}/tmux.conf.master"
 REATTACH_SH="${TMUX_DIR}/reattached-shell"

 session='default'
  config="${DEFAULT_CONF}"
reattach="${REATTACH_SH}"
    tmux=`which tmux`

if [ -x "${tmux}" ]; then # tmux installed, yay!

    if [ -n "${PARENT_TMUX}" ]; then
        return 0
    fi

    if [ -z "${TMUX}" -a -z "${SSH_CLIENT}" ]; then
        session='master'
        config=${MASTER_CONF}

        # use independent server
        tmux="${tmux} -L master"

        # outer tmux doesnt need to wrap shells
        # with reattach-to-user-namespace
        reattach=''
    fi

    if [ -n "${TMUX}" ]; then
        PARENT_TMUX=${TMUX}
        unset TMUX
        export PARENT_TMUX TMUX
    fi

    # build the command and then execute it as an atomic unit.
    # otherwise, the session would get created without the modified
    # environment
    cmds=''

    if ! ${=tmux} has-session -t ${session} 2> /dev/null; then
        cmds+="start-server; "

        # let the inner shells know not to spawn another master tmux
        if [ -n "${PARENT_TMUX}" ]; then
            cmds+="set-environment -g PARENT_TMUX '${PARENT_TMUX}'; "
        fi

        # fix pasteboard access for shells running in the inner tmux
        if [ -x "${reattach}" ]; then
            cmds+="set-option -g default-command '${reattach}'; "
        fi
    fi

    cmds+="new-session -As ${session}"
    echo "${=tmux} -f ${config} ${(z)cmds}"
    trace
    ${=tmux} -f ${config} ${(z)cmds}
fi
