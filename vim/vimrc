set nocompatible  " disable vi compatibility
set ttyfast       " Optimize for fast terminal connections

" English, motherfucker! do you speak it?
language C
language messages en_US.UTF-8

set shiftwidth=4   " Use 4 spaces for indentation
set softtabstop=4  " Use 4 spaces for soft tab
set tabstop=4      " Use 4 spaces for tab
set expandtab      " Expand tab to spaces
set colorcolumn=95 " highlight column 95

set relativenumber " Enable line numbers
set cursorline     " Highlight current line
set nostartofline  " Don’t reset cursor to start of line when moving around.
set nowrap         " No line wrapping
set hidden         " Allow hidden buffers
set undofile       " Create undo files

set backspace=indent,eol,start " Backspace through everything in INSERT mode
set encoding=utf-8 nobomb      " Use UTF-8 without BOM

set list " Show 'invisible' characters
set listchars=tab:▸\
set listchars+=trail:·
set listchars+=nbsp:_

let s:vimdir='.vim'

if has('win32')
    let s:vimdir='vimfiles'
endif

" Centralize backups, swapfiles and undo history
exec 'set backupdir=~/' . s:vimdir . '/backups'
exec 'set directory=~/' . s:vimdir . '/swaps'

if exists('&undodir')
    exec 'set undodir=~/' . s:vimdir . '/undo'
endif

" Make CtrlP not leave the ansible root
let g:ctrl_root_markers = [ 'ansible.cfg' ]

let mapleader=","

" !silent is used to suppress error messages if the config line
" references plugins/colorschemes that might be missing

" Call pathogen plugin management
silent! runtime bundle/pathogen/autoload/pathogen.vim
silent! call pathogen#infect()

" Set 256 color terminal support
set t_Co=256

" 10.7+ Terminal.app workaround
if $TERM_PROGRAM == 'Apple_Terminal' || $TERM_PROGRAM == 'iTerm.app'
    let g:solarized_termcolors = &t_Co
    let g:solarized_termtrans = 1
endif

" Set colorscheme
if has('gui_running')
    set background=light
else
    set background=dark
endif

silent! colorscheme solarized

if has('cmdline_info')
    " Show the cursor line and column number
    set ruler
    " Show partial commands in status line
    set showcmd
    " Show whether in insert or replace mode
    set showmode
endif

if has('statusline')
    set laststatus=2
    set statusline=   " clear the statusline for when vimrc is reloaded
    set statusline+=%-3.3n\                      " buffer number
    set statusline+=%f\                          " file name
    set statusline+=%h%m%r%w                     " flags
    set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
    set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
    set statusline+=%{&fileformat}]              " file format
    set statusline+=%=                           " right align
    set statusline+=%b,0x%-8B\                   " current char
    set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset
endif

if has('wildmenu')
    " Show a list of possible completions
    set wildmenu
    " Tab autocomplete longest possible part of a string, then list
    set wildmode=longest,list
    if has ('wildignore')
        set wildignore+=*.a,*.o
        set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
        set wildignore+=.DS_Store,.git,.hg,.svn
        set wildignore+=*~,*.swp,*.tmp
        set wildignore+=*/vim/backups/*
        set wildignore+=*/vim/swaps/*
        set wildignore+=*/vim/undo/*
    endif
endif

if has('extra_search')
    set hlsearch   " Highlight searches [use :noh to clear]
    set incsearch  " Highlight dynamically as pattern is typed
    set ignorecase " Ignore case of searches...
    set smartcase  " ...unless has mixed case
    set gdefault   " replace all instances by default

    " <Leader>, <Space> hide highlights
    nnoremap <Leader><Space> :noh<CR>
endif
"
" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %

" disable crazy vim regex
nnoremap / /\v
vnoremap / /\v

" tab to matching brackets
nnoremap <tab> %
vnoremap <tab> %

" move on every wrapped line in wrap mode
nnoremap j gj
nnoremap k gk

" center on search result
nnoremap n nzz
nnoremap N Nzz

" C-Tab, C-S-Tab for buffer switching (only in GUI)
inoremap <C-Tab>   <Esc>:bnext<CR>
inoremap <C-S-Tab> <Esc>:bprev<CR>

noremap <C-Tab>   :bnext<CR>
noremap <C-S-Tab> :bprev<CR>

" JJ exit out of insert mode
inoremap jj <Esc>

" F1 and Esc get me out of insert mode
inoremap <F1> <Esc>
nnoremap <F1> :call MapF1()<CR>
vnoremap <F1> :call MapF1()<CR>

function! MapF1()
  if &buftype == "help"
    exec 'quit'
  else
    exec 'help'
  endif
endfunction

" map ; to :
nnoremap ; :

" <Leader>, W remove trailing whitespace
nnoremap <Leader>W :s/\v\s+$<CR>

if has('autocmd')
    " remove all auto commands
    autocmd!

    " Load files for specific filetypes
    filetype on
    filetype indent on
    filetype plugin on

    " automatically reload vimrc, gvimrc when edited
    autocmd! bufwritepost vimrc source %
    autocmd! bufwritepost gvimrc source %

    " save everything when focus lost, except unnamed buffers
    autocmd! FocusLost * :wa!
endif

" Enable syntax highlighting
if has('syntax')
    syntax enable
endif

command! Mkdir exec ":! mkdir -pv %:h"
