# {{ ansible_managed }}

{#
sshd_port is defined in group_vars/FreeBSD.
demonka_* network variables are defined in host_vars/demonka/network.yml
#}

ext_if      = "{{ pfconf_ext_if }}"
int_if      = "{{ pfconf_int_if }}"
int_if      = "lo1"
vpn_if      = "{ tun0 tun1 }"

# Ports
bt          = "51413"
ssh         = "{{ sshd_port if sshd_port is defined else 'ssh' }}"

udp_noise   = "{ mdns
                 netbios-ns
                 netbios-dgm
                 netbios-ssn
                 1947
                 5355
                 17500 }"

# IPs
ext_ip0 = $ext_if:0
ext_ip1 = {{ demonka_ext_inet_ip1 }}

table <demonka>   const { $ext_ip0 $ext_ip1 $int_if:0 }
table <int_net>   const { {{ demonka_int_inet_net }} }

table <private>   const { 10/8 172.16/12 169.254/16 192.168/16 }
table <multicast> const { $ext_if:broadcast 224/4 255.255.255.255 }

set skip on lo0
set block-policy return

scrub on $ext_if reassemble tcp
scrub on $vpn_if reassemble tcp

############################################
# TRANSLATION
############################################

# nat for vpn clients
nat from <int_net> to ! <int_net> -> $ext_ip0

# tcp services on primary IP
rdr inet proto tcp to $ext_ip0 port http    -> $int_if:0
rdr inet proto tcp to $ext_ip0 port https   -> $int_if:0
rdr inet proto tcp to $ext_ip0 port openvpn -> $int_if:0
rdr inet proto tcp to $ext_ip0 port $ssh    -> $int_if:0

# udp services on primary IP
rdr inet proto udp to $ext_ip0 port $bt     -> $int_if:0
rdr inet proto udp to $ext_ip0 port openvpn -> $int_if:0

# OpenVPN services on secondary IP
rdr inet proto tcp to $ext_ip1 port https   -> $int_if:0 port openvpn
rdr inet proto tcp to $ext_ip1 port openvpn -> $int_if:0
rdr inet proto udp to $ext_ip1 port openvpn -> $int_if:0

############################################
# QUICK FILTERING
############################################

antispoof quick log for { lo0 tun $ext_if }

# block drop and don't log multicasts on the external interface
block drop quick on $ext_if to <multicast>
block drop quick on $ext_if proto igmp

# block drop and don't log various UDP noise
block drop quick on $ext_if proto udp to port $udp_noise

# block drop packets from impossible addresses
block drop in log quick on $ext_if from <private>
block drop in log quick on $ext_if from no-route
block drop in log quick on $ext_if from urpf-failed

# don't log and return ICMP UNREACHABLE, probably BitTorrent peers
block return quick on $ext_if proto udp to port >= 49152

############################################
# FILTERING
############################################

# block everything
block log

# allow internal services
pass proto tcp to $int_if:0 port { domain http https openvpn $ssh }
pass proto udp to $int_if:0 port { domain openvpn $bt }

# allow pings
pass inet proto icmp to   <demonka> icmp-type echoreq
pass inet proto icmp from <demonka> icmp-type echoreq
pass inet proto icmp from <int_net> icmp-type echoreq

# allow outbound traffic
pass proto { tcp udp } from <int_net>
pass proto { tcp udp } from <demonka>
