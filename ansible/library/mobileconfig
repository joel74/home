#!/usr/bin/env python

import base64
import hashlib
import os
import platform
import plistlib
import re
import uuid

class DeterministicUUID(object):
    last = 0
    root = None

    @classmethod
    def next_uuid(c):
        c.last = c.last + 1
        return str(uuid.uuid5(
                uuid.NAMESPACE_DNS,
                ("%d.%s.juliekoubova.net" % (c.last, c.root))))

class PayloadMarker(object):
    def replace(self, plist):
        return None

class ReplaceWithPayloadUUIDMarker(PayloadMarker):
    def __init__(self, identifier):
        self.identifier = identifier

    def replace(self, plist):
        for child in plist['PayloadContent']:
            if isinstance(child, dict) and child['PayloadIdentifier'] == self.identifier:
                return child['PayloadUUID']
        raise Exception("Payload %s not found." % self.identifier)

def read_data(path):
    with open(os.path.expanduser(path), 'r') as f:
        return plistlib.Data(f.read())

def read_string(path):
    with open(os.path.expanduser(path), 'r') as f:
        return f.read()

def open_openvpn_file(server, filename):
    path = '.%s.ovpn/%s' % (server, filename)
    return open(os.path.expanduser(path), 'r')

def read_openvpn_file(server, filename):
    with open_openvpn_file(server, filename) as f:
        return f.read()

def read_openvpn_conf(name):
    with open_openvpn_file(name, 'openvpn.conf') as f:
        for line in f:
            line = re.sub(r'(?m)#.*', '', line).strip()
            if len(line):
                m = re.match(r'(\S+)\s*(.*)', line)
                if m:
                    yield m.group(1, 2)

def parse_openvpn_conf(name):
    for key, value in read_openvpn_conf(name):
        if key == 'ca':
            yield key, read_openvpn_file(name, value)
        elif key == 'cert' or key == 'key':
            # ignore, certificate is a pkcs12 payload
            pass
        elif key == 'tls-auth':
            path, direction = value.split()
            yield key, read_openvpn_file(name, path)
            yield 'key-direction', str(direction)
        elif not value:
            yield key, 'NOARGS'
        else:
            yield key, value


def Payload(parent, payload_type):
    result_uuid = DeterministicUUID.next_uuid()
    result = dict(
         PayloadType    = payload_type,
         PayloadUUID    = result_uuid,
         PayloadVersion = 1
    )

    if parent is not None:
        result['PayloadIdentifier'] = '%s.%s' % (parent['PayloadIdentifier'], result_uuid)

    return result

def PayloadCert(parent, payload_type, path, p):
    result = Payload(parent, payload_type)
    result['PayloadContent']         = read_data(path)
    result['PayloadCertificateName'] = os.path.basename(path)
    result['PayloadDisplayName']     = p['display_name']
    result['PayloadDescription']     = 'Configures certificate settings.'

    if 'identifier' in p:
        result['PayloadIdentifier'] = p['identifier']

    return result

def PayloadRootCert(parent, p):
    return PayloadCert(parent, 'com.apple.security.root', p['ca'], p)

def PayloadPkcs12(parent, p):
    result = PayloadCert(parent, 'com.apple.security.pkcs12', p['pkcs12'], p)
    if 'password' in p:
        result['Password'] = str(p['password'])
    return result

def PayloadInclude(parent, p):
    plist = plistlib.readPlist(os.path.expanduser(p['include']))
    return plist['PayloadContent']

def PayloadOpenVpn(parent, p):
    for server in p['openvpn']:
        openvpn_conf = dict(parse_openvpn_conf(server['name']))

        result = Payload(parent, 'com.apple.vpn.managed')
        result['PayloadDisplayName'] = server['name']
        result['VPN'] = dict(
            AuthenticationMethod   = 'Certificate',
            PayloadCertificateUUID = ReplaceWithPayloadUUIDMarker(p['certificate']),
            RemoteAddress          = 'DEFAULT',
            VendorConfig           = openvpn_conf,
            VPNType                = 'VPN',
            VPNSubType             = 'net.openvpn.OpenVPN-Connect.vpnplugin'
        )
        yield result

def process_payload(parent, p):
    if 'ca' in p:
        return PayloadRootCert(parent, p)
    if 'pkcs12' in p:
        return PayloadPkcs12(parent, p)
    if 'include' in p:
        return PayloadInclude(parent, p)
    if 'openvpn' in p:
        return PayloadOpenVpn(parent, p)
    return []

def process_payloads(parent, payloads):
    for p in payloads:
        results = process_payload(parent, p)

        if hasattr(results, '__iter__') and not isinstance(results, dict):
            results = list(results)
        else:
            results = [ results ]

        for r in results:
            yield r

def process_markers(plist, current):
    if hasattr(current, 'iteritems'):
        for key, value in current.iteritems():
            if isinstance(value, PayloadMarker):
                current[key] = value.replace(plist)
            else:
                process_markers(plist, value)
    elif hasattr(current, '__iter__'):
        for child in current:
            process_markers(plist, child)

def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(aliases=['dest']),
            identifier=dict(type='str'),
            display_name=dict(type='str'),
            can_remove=dict(
                default=True,
                type='bool',
            ),
            payloads=dict(
                default=None,
                type='list',
            )
        ),
        supports_check_mode=True,
    )

    params       = module.params
    name         = os.path.expanduser(params['name'])
    existing_md5 = None

    if not params['display_name']:
        module.fail_json(msg='display_name not specified')
        return

    for p in params['payloads']:
        if not p.get('include') and not p.get('display_name'):
            module.fail_json(msg='display_name not specified for payload %s' % str(p))
            return

    if os.path.isfile(name):
        with open(name, 'r') as f:
            existing_md5 = hashlib.md5(f.read()).digest()

    os.chdir(os.path.dirname(name))

    DeterministicUUID.root = params['identifier']

    plist = Payload(None, 'Configuration')
    plist['PayloadIdentifier']        = params['identifier']
    plist['PayloadDisplayName']       = params['display_name']
    plist['PayloadRemovalDisallowed'] = not params['can_remove']
    plist['PayloadContent']           = list(process_payloads(plist, params['payloads']))

#    import yaml
#    print yaml.dump(plist)
#    raise Exception("yaaa")

    process_markers(plist, plist['PayloadContent'])

    plist_str = plistlib.writePlistToString(plist)
    plist_md5 = hashlib.md5(plist_str).digest()

    if plist_md5 == existing_md5:
        module.exit_json(changed=False)
    else:
        with open(name, 'w') as f:
            f.write(plist_str)
        module.exit_json(changed=True, message='mobile config generated')

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
