#!/usr/bin/env python

from __future__ import print_function

import distutils.dir_util
import os
import os.path
import sys
import yaml

def mkdir(*args):
    path = os.path.join(*args)
    print(path)
    distutils.dir_util.mkpath(path)

class Role(object):
    def __init__(self, name):
        self.name = name
        self.path = os.path.join('roles', name)
        self.tasks = []
        self.meta = {}

    def scaffold(self):
        mkdir(self.path)
        self._mkyml(self.meta,  'meta')
        self._mkyml(self.tasks, 'tasks')

    def add_dependency(self, dependency, when=None):
        if 'dependencies' not in self.meta:
            self.meta['dependencies'] = []

        if when is not None:
            dependency = {
                'role': dependency,
                'when': when
            }
        self.meta['dependencies'].append(dependency)

    def _mkyml(self, contents, dirname, filename='main.yml', empty=False):
        if not empty and Role._is_empty(contents):
            return

        mkdir(self.path, dirname)
        path = os.path.join(self.path, dirname, filename)

        if os.path.isfile(path):
            print("already exists: {0}".format(path), file=sys.stderr)
            return

        print(path)

        with open(path, 'w') as f:
            if contents is None:
                f.write('---\n')
            else:
                yaml.dump(contents, f, explicit_start=True)

    @staticmethod
    def _is_empty(obj):
        return obj is None or len(obj) == 0


def homebrew_task(pkg):
    return [ {
        'name':     'install',
        'homebrew': 'name={0} state=latest'.format(pkg)
    } ]

def port_task(pkg):
    return [ {
        'name': 'install',
        'sudo': 'yes',
        'port': 'name={0} state=present'.format(pkg)
    } ]

platforms = [
        dict( name      = 'darwin',
              os_family = 'Darwin',
              task_builder = homebrew_task,
              dependencies = [ 'darwin/homebrew' ]),

        dict( name      = 'freebsd',
              os_family = 'FreeBSD',
              task_builder = port_task,
              dependencies = [ 'freebsd/portsnap' ])
        ]


for pkg in sys.argv[1:]:

    platform_roles = [
        Role('{0}/{1}'.format(pkg, plat['name'])) for plat in platforms
    ]

    role = Role(pkg)

    for plat in platforms:
        plat_role = Role('{0}/{1}'.format(pkg, plat['name']))
        plat_role.tasks

        role.add_dependency(
            plat_role.name,
            when='ansible_os_family == "{0}"'.format(plat['os_family'])
        )

        for d in plat['dependencies']:
            plat_role.add_dependency(d)

        plat_role.scaffold()

    role.scaffold()
