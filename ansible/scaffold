#!/usr/bin/env python

from __future__ import print_function

import argparse
import distutils.dir_util
import errno
import itertools
import os.path
import re
import subprocess
import sys
import yaml

def stderr(message):
    print(message, file=sys.stderr)

class Platform(object):
    def __init__(self, os_family, role_name):
        self.os_family = os_family
        self.name      = os_family.lower()
        self.role_name = role_name

    @classmethod
    def get(cls, name):
        return next((p for p in cls.all() if p.name == name), None)

    @classmethod
    def all(cls):
        return [ p for p in vars(cls).values() if isinstance(p, cls) ]

Platform.DARWIN  = Platform('Darwin',  'brew')
Platform.FREEBSD = Platform('FreeBSD', 'port')

class RoleYmlDirectory(object):
    def __init__(self, role, name, file_type=list):
        self.role     = role
        self.name     = name
        self.files    = dict()
        self.file_type = file_type

        try:
            files   = os.listdir(self.path)
            regexp  = re.compile('^(.*)\.yml$')
            matches = filter(None, map(regexp.match, files))

            for m in matches:
                name = m.group(1)
                self.files[name] = self._try_load(name)

        except OSError, e:
            if e.errno != errno.ENOENT:
                raise

        if 'main' not in self.files:
            self.files['main'] = file_type()

        self.main = self.files['main']

    @property
    def path(self):
        return os.path.join(self.role.path, self.name)

    def write(self, empty_main = False):
        distutils.dir_util.mkpath(self.path)

        for filename, contents in self.files.iteritems():
            force_empty = empty_main and (filename == 'main')
            self._write(
                    filename,
                    contents,
                    force_empty = force_empty
                )

    def _open(self, filename, mode):
        return open(os.path.join(self.path, filename + '.yml'), mode)

    def _try_load(self, filename):
        try:
            with self._open(filename, 'r') as f:
                return yaml.load(f)
        except OSError, e:
            if e.errno == errno.ENOENT:
                return self.file_type()
            else:
                raise

    def _write(self, filename, contents, force_empty=False):
        if contents or force_empty:
            with self._open(filename, 'w') as f:
                if contents:
                    yaml.dump(contents, f, explicit_start=True)
                else:
                    f.write('---\n')

class Role(object):
    PREFIX = 'roles'

    def __init__(self, name_or_path):
        self.name = Role.strip_prefix(name_or_path)
        self.path = Role.prepend_prefix(self.name)

        self.dependencies = []

        self.defaults = RoleYmlDirectory(self, 'defaults', file_type=dict)
        self.meta     = RoleYmlDirectory(self, 'meta',     file_type=dict)
        self.tasks    = RoleYmlDirectory(self, 'tasks',    file_type=list)

        self.empty_defaults = False
        self.empty_tasks = False
        self.empty_meta = False

    def add_dependency(self, dependency=None, **kwargs):
        self.dependencies.append(dependency or kwargs)

    def scaffold(self):
        if self.dependencies:
            self.meta.main['dependencies'] = self.dependencies

        self.defaults.write(self.empty_defaults)
        self.meta.write(self.empty_meta)
        self.tasks.write(self.empty_tasks)

    @property
    def files(self):
        for root, _, filenames in os.walk(self.path):
            for fn in filenames:
                yield os.path.join(root, fn)

    @staticmethod
    def strip_prefix(path, prefix = PREFIX):
        prefix = re.escape(prefix)
        expr   = '^{0}/(.*)$'.format(prefix)

        m = re.match(expr, path)

        if m:
            path = m.group(1)

        return path

    @staticmethod
    def prepend_prefix(name, prefix = PREFIX):
        return os.path.join(prefix, name)


class ScaffolderCommand(object):

    def parser(self, sp):
        pass

    def scaffold(self, args):
        raise NotImplementedError("Scaffolder.scaffold not implemented!")

    def run(self, args):
        for r in self.scaffold(args):
            r.scaffold()

    def add_name_argument(self, p):
        p.add_argument(
                'name',
                metavar=' name'
            )

    @classmethod
    def main(cls):
        parser = argparse.ArgumentParser()
        subparsers = parser.add_subparsers(
                title='subcommands'
            )

        for subclass in cls.__subclasses__():
            sp = subparsers.add_parser(
                    subclass.COMMAND,
                    help=(subclass.__doc__)
                )

            inst = subclass()
            inst.parser(sp)
            sp.set_defaults(func=inst.run)

        args = parser.parse_args()
        args.func(args)

class RoleScaffolder(ScaffolderCommand):
    """
    Scaffolds an empty role.
    """

    COMMAND = 'role'

    def parser(self, sp):
        self.add_name_argument(sp)
        sp.add_argument('--defaults', action='store_true')
        sp.add_argument('--add-dep',  nargs='+')

    def scaffold(self, args):
        role = Role(args.name)
        role.empty_tasks = True
        role.empty_defaults = args.defaults

        for dep in args.add_dep:
            role.add_dependency(dep)

        yield role

class PackageScaffolder(ScaffolderCommand):
    """
    Scaffolds a platform independent role with dependencies
    on platform-specific roles.
    """

    COMMAND = 'pkg'

    def parser(self, sp):
        self.add_name_argument(sp)

    def scaffold(self, args):
        pkg_role = Role(args.name)

        for plat in Platform.all():
            plat_role = Role(
                    os.path.join(plat.name, plat.role_name, pkg_role.name)
                )

            plat_role.add_dependency(
                    role = os.path.join(plat.name, plat.role_name),
                    name = pkg_role.name
                )

            pkg_role.add_dependency(
                    role = plat_role.name,
                    when = 'ansible_os_family == "{0}"'.format(plat.os_family)
                )

            yield plat_role

        yield pkg_role

#class PlatformPackageScaffolder(ScaffolderCommand):
#    """Scaffolds a platform-specific package role."""
#
#    COMMAND = 'platform-pkg'
#
#    def parser(self, sp):
#        sp.add_argument('-p', '--platform',
#                metavar='platform-name',
#                choices=map(lambda p: p.name, Platform.all())
#            )
#        sp.add_argument('name', metavar='package-name')
#
#    def scaffold(self, args):
#        name = Role.strip_prefix(args.name)
#        platform = None
#
#        if args.platform:
#            platform = Platform.get(args.platform)
#
#        if platform is None:
#            parts    = name.split('/')
#            name     = os.path.join(*parts[1:])
#            platform = Platform.get(parts[0])
#
#            if platform is None:
#                stderr("platform must be specified either using the -p parameter, " +
#                       "or as the first part of the role name")
#                return
#
#        path = os.path.join(platform.name, name)
#        yield PlatformPkgRole(path, name, platform)

class RoleEditor(ScaffolderCommand):
    """
    Open all role files in a text editor.
    """

    COMMAND = 'edit'

    def parser(self, p):
        p.add_argument('name', nargs='+')

    def run(self, args):
        command = [ os.getenv('EDITOR') or
                    os.getenv('VISUAL') or
                    'vi' ]

        roles = map(Role, args.name)

        paths    = list(itertools.chain.from_iterable(r.files for r in roles))
        root     = RoleEditor._common_path(paths)
        relpaths = [ os.path.relpath(p, start=root) for p in paths ]

        command.extend(relpaths)
        subprocess.call(command, cwd=root)

    @staticmethod
    def _common_path(paths):
        def allequal(lst):
            return all(i == lst[0] for i in lst[1:])

        paths        = map(os.path.normpath, paths)
        by_dir_level = zip(*[p.split(os.path.sep) for p in paths])
        common       = list(itertools.takewhile(allequal, by_dir_level))

        return os.path.sep.join(zip(*common)[0])

ScaffolderCommand.main()
