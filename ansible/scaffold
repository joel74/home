#!/usr/bin/env python

from __future__ import print_function

import argparse
import distutils.dir_util
import os.path
import sys
import yaml

class Platform(object):
    def __init__(self, os_family, dependencies=None, install_task=None):
        self.os_family     = os_family
        self.dependencies  = dependencies or []
        self.install_task  = install_task or (lambda pkg: None)

Platform.platforms = {
    'darwin': Platform(
        os_family    = 'Darwin',
        dependencies = [ 'darwin/homebrew' ],
        install_task = lambda pkg: {
            'name':     'install',
            'homebrew': 'name={0} state=latest'.format(pkg)
        }
    ),

    'freebsd': Platform(
        os_family    = 'FreeBSD',
        dependencies = [ 'freebsd/portsnap' ],
        install_task = lambda pkg: {
            'name': 'install',
            'sudo': 'yes',
            'port': 'name={0} state=present'.format(pkg)
        }
    )
}

class Role(object):
    def __init__(self, name):
        self.name = name
        self.path = os.path.join('roles', name)
        self.dependencies = []
        self.tasks = []
        self.meta = {}

    def add_dependency(self, dependency, when=None):
        if when is not None:
            dependency = {
                'role': dependency,
                'when': when
            }
        self.dependencies.append(dependency)

    def scaffold(self):
        if self.dependencies:
            self.meta['dependencies'] = self.dependencies

        self._mkyml(self.meta,  'meta')
        self._mkyml(self.tasks, 'tasks', empty=True)

    def _mkyml(self, contents, dirname, filename='main.yml', empty=False):
        if not empty and Role._is_empty(contents):
            return

        self._mkdir(dirname)
        path = os.path.join(self.path, dirname, filename)

        if os.path.isfile(path):
            print("already exists: {0}".format(path), file=sys.stderr)
            return

        print(path)

        with open(path, 'w') as f:
            if Role._is_empty(contents):
                f.write('---\n')
            else:
                yaml.dump(contents, f, explicit_start=True)

    def _mkdir(self, *args):
        path = os.path.join(self.path, *args)
        distutils.dir_util.mkpath(path)

    @staticmethod
    def _is_empty(obj):
        return obj is None or len(obj) == 0

class PlatformPkgRole(Role):
    def __init__(self, role_name, pkg_name, platform):
        Role.__init__(self, role_name)
        self.dependencies = platform.dependencies
        self.tasks = [ platform.install_task(pkg_name) ]

class Scaffolder(object):

    def parser(self, sp):
        pass

    def scaffold(self, args):
        raise NotImplementedError("Scaffolder.scaffold not implemented!")

    @staticmethod
    def main():
        parser = argparse.ArgumentParser()
        subparsers = parser.add_subparsers(
                title='subcommands'
            )

        for subclass in Scaffolder.__subclasses__():
            sp = subparsers.add_parser(
                    subclass.COMMAND,
                    help=subclass.HELP
                )

            inst = subclass()
            inst.parser(sp)
            sp.set_defaults(func=inst.scaffold)

        args = parser.parse_args()
        results = args.func(args)

        for r in results:
            r.scaffold()

class RoleScaffolder(Scaffolder):

    COMMAND = 'role'
    HELP    = 'Scaffolds an empty role'

    def parser(self, sp):
        sp.add_argument('name', metavar='name')

    def scaffold(self, args):
        yield Role(args.name)

class PackageScaffolder(Scaffolder):
    COMMAND = 'pkg'
    HELP    = 'Scaffolds a package role with platform-specific subroles.'

    def parser(self, sp):
        sp.add_argument('name', metavar='name')

    def scaffold(args):
        pkg_role = Role(args.name)

        for plat_name, plat in Platform.platforms.iteritems():
            plat_role = PlatformPkgRole(
                    '{0}/{1}'.format(pkg_role.name, plat_name),
                    pkg_role.name,
                    plat
                )

            pkg_role.add_dependency(
                plat_role.name,
                when='ansible_os_family == "{0}"'.format(plat.os_family)
            )

            yield plat_role

        yield pkg_role

class PlatformPackageScaffolder(Scaffolder):
    COMMAND = 'platform-pkg'
    HELP    = 'Scaffolds a platform-specific package role.'

    def parser(self, sp):
        sp.add_argument('platform',
                metavar='platform-name',
                choices=Platform.platforms.keys()
            )
        sp.add_argument('name', metavar='package-name')

    def scaffold(self, args):
        role_name = os.path.join(
                args.platform,
                args.name
            )
        platform = Platform.platforms[args.platform]
        yield PlatformPkgRole(role_name, args.name, platform)

Scaffolder.main()
