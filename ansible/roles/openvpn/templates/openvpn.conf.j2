# {{ ansible_managed }}

{#
    when generating viscosity configs:

        item = { remote:   'vpn.example.com'
                 name:     'vpn.example.com (UDP)'
                 instance: <openvpn server config object> }

    otherwise:

        item = None or config object
#}

{% if item is defined and item.instance is defined %}
    {% set openvpn      = item.instance | default(openvpn_client) %}
    {% set openvpn_remote = item.remote %}
    {% set openvpn_cred = {
          'ca':   'ca.crt',
          'cert': client + '.crt',
          'key':  client + '.key'
    } %}
{% else %}
    {% set openvpn        = item %}
    {% set openvpn_remote = openvpn.remote | default(openvpn_remote) | default(None) %}

    {% if openvpn.cred is defined %}
        {% set openvpn_cred = openvpn.cred %}
    {% endif %}
{% endif %}


ca   {{ openvpn_cred.ca }}
cert {{ openvpn_cred.cert }}
key  {{ openvpn_cred.key }}

proto {{ openvpn.proto | default(openvpn_proto) }}
port  {{ openvpn.port  | default(openvpn_port) }}

{% if openvpn_remote | default(None) %}

    remote   {{ openvpn_remote }}
    tls-auth {{ openvpn.name | default('openvpn') }}.ta-key 1
    remote-cert-tls server
    client
    nobind
    pull

{% else %}

    server   {{ openvpn.ipv4.network | default(openvpn_ipv4_network) | mandatory }} {{ openvpn.ipv4.mask | default(openvpn_ipv4_mask) | mandatory }}
    dh       {{ openvpn_cred.dh }}
    tls-auth {{ openvpn.name | default('openvpn') }}.ta-key 0

    {% for p in openvpn.push | default(openvpn_push) | default([]) %}
        push "{{ p }}"
    {% endfor %}

    {% if openvpn.max_clients | default(openvpn_max_clients) %}
        max-clients {{ openvpn.max_clients | default(openvpn_max_clients) }}
    {% endif %}


    {% if openvpn.bind_ip | default(openvpn_bind_ip) %}
        local {{ openvpn.bind_ip | default(openvpn_bind_ip) }}
    {% endif %}

    {# causes "Assertion failed at helper.c:533" when specified in a client config #}
    {% if openvpn.tcp_nodelay | default(openvpn_tcp_nodelay) | default(false) %}
        # disables the Nagle algorithm on TCP sockets
        # In VPN applications over TCP, TCP_NODELAY is generally
        # a good latency optimization.
        tcp-nodelay
    {% endif %}

{% endif %}

{% if is_viscosity %}
#viscosity name {{ item.name }}
{% else %}

    dev   {{ openvpn.dev   | default(openvpn_dev) }}

    {% if openvpn.status | default(openvpn_status) %}
        status      {{ openvpn.status | default(openvpn_status) }}
    {% endif %}

    {% if openvpn.reduce_privileges | default(openvpn_reduce_privileges) | default(true) %}
        # reduce privileges
        user   nobody
        group  nobody

        {% if openvpn.chroot | default(openvpn_chroot) | default(false) %}
            chroot {{ openvpn.chroot | default(openvpn_chroot) | mandatory }}
        {% endif %}

        # The persist options will try to avoid accessing certain
        # resources on restart that may no longer be accessible because
        # of the privilege downgrade.
        persist-key
        persist-tun
    {% endif %}

{% endif %}

{% if openvpn.keepalive | default(openvpn_keepalive) %}
    keepalive   {{ openvpn.keepalive | default(openvpn_keepalive) }}
{% endif %}

{% if openvpn.comp_lzo | default(openvpn_comp_lzo) %}
    comp-lzo
{% endif %}

{% if openvpn.cipher | default(openvpn_cipher) %}
    cipher      {{ openvpn.cipher | default(openvpn_cipher) }}
{% endif %}
